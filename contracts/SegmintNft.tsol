pragma ever-solidity >= 0.64.0;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "./interfaces/ISegmintCollection.tsol";
import "./libraries/MsgFlag.tsol";
import "./libraries/ErrorCodes.tsol";
import "./structures/ITile.tsol";

import '@itgold/everscale-tip/contracts/TIP4_1/TIP4_1Nft.sol';
import '@itgold/everscale-tip/contracts/TIP4_2/TIP4_2Nft.sol';
import '@itgold/everscale-tip/contracts/TIP4_3/TIP4_3Nft.sol';

contract SegmintNft is TIP4_1Nft, TIP4_3Nft, ITile {

    uint6 nftTileStartX_;
    uint6 nftTileStartY_;
    uint6 nftTileEndX_;
    uint6 nftTileEndY_;
    uint128 remainOnNft_;
    uint128 lockedAmount_;

    string description_;
    string url_;
    bool burnInProgress_;
    bool isBurningBlocked_;

    modifier onlyOwner() {
        require(msg.sender == _owner, ErrorCodes.NOT_OWNER);
        _;
    }

    constructor(
        address owner,
        address sendGasTo,
        uint128 remainOnNft,
        uint128 indexDeployValue,
        uint128 indexDestroyValue,
        TvmCell codeIndex,
        uint128 lockedAmount,
        uint6 nftTileStartX,
        uint6 nftTileStartY,
        uint6 nftTileEndX,
        uint6 nftTileEndY,
        string description,
        string url
    ) TIP4_1Nft(
        owner,
        sendGasTo,
        remainOnNft
    ) TIP4_3Nft (
        indexDeployValue,
        indexDestroyValue,
        codeIndex
    ) public {
        nftTileStartX_ = nftTileStartX;
        nftTileStartY_ = nftTileStartY;
        nftTileEndX_ = nftTileEndX;
        nftTileEndY_ = nftTileEndY;
        remainOnNft_ = remainOnNft;
        lockedAmount_ = lockedAmount;
        description_ = description;
        url_ = url;
        isBurningBlocked_ = false;
        // We support ITIP4_2JSON_Metadata.getJson
        // But not would like to inherit TIP4_2Nft
        // Just implemented getJson() method below
        _supportedInterfaces[
            bytes4(tvm.functionId(ITIP4_2JSON_Metadata.getJson))
        ] = true;
    }

    function getInfo() public view virtual override responsible returns(
        uint256 id,
        address owner,
        address manager,
        address collection)
    {
        return {value: 0, flag: 64, bounce: false} (
            _id,
            _owner,
            _manager,
            _collection
        );
    }

    function getJson() public view responsible returns (string json) {
        string name = format("Segmint ocean Nft {}", _id);
        string description = format("Piece of canvas x from {} to {}, y from {} to {} pixels", uint256(nftTileStartX_) * 20, uint256(nftTileEndX_) * 20, uint256(nftTileStartY_) * 20, uint256(nftTileEndY_) * 20);
        string source = "https://segmint.app/collection_logo_ocean.png";
        string external_url = "https://segmint.app/";

        json = format(
            "{\"type\":\"Basic NFT\",\"name\":\"{}\",\"description\":\"{}\",\"preview\":{\"source\":\"{}\",\"mimetype\":\"image/png\"},\"files\":[{\"source\":\"{}\",\"mimetype\":\"image/png\"}],\"external_url\":\"{}\"}",
            name,
            description,
            source,
            source,
            external_url
        );
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} json;
    }

    function getNftCustomData() external responsible returns (uint256 id, address owner, address collection, uint128 lockedAmount, string description, string url, uint6 tileStartX, uint6 tileStartY, uint6 tileEndX, uint6 tileEndY) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} (_id, _owner, _collection, lockedAmount_, description_, url_, nftTileStartX_, nftTileStartY_, nftTileEndX_, nftTileEndY_);
    }

    function colorify(bytes[] colors, string description, string url) public onlyOwner {
        tvm.rawReserve(remainOnNft_, 0);
        description_ = description;
        url_ = url;
        ISegmintCollection(_collection).colorifyTiles{flag: MsgFlag.ALL_NOT_RESERVED, bounce: false, value: 0}(uint32(_id), colors, nftTileStartX_, nftTileStartY_, nftTileEndX_, nftTileEndY_ , msg.sender);
    }

    function setBurningBlocked(bool isBlocked, address sendGasBack) external {
        require(msg.sender == _collection, ErrorCodes.NOT_COLLECTION);
        isBurningBlocked_ = isBlocked;
        sendGasBack.transfer({value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS});
    }

    function burnNft() external onlyManager {
        require(msg.value >= 0.3 ever, ErrorCodes.NOT_ENOUGH_GAS);
        require(isBurningBlocked_ == false, ErrorCodes.BURNING_IS_BLOCKED);
        require(burnInProgress_ == false, ErrorCodes.BURN_IN_PROGRESS);
        burnInProgress_ = true;
        ISegmintCollection(_collection).burnNft{value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS}(uint32(_id), lockedAmount_, nftTileStartX_,  nftTileStartY_, nftTileEndX_, nftTileEndY_);
    }

    function onBurnSuccess() external  {
        require(msg.sender == _collection, ErrorCodes.NOT_COLLECTION);
        tvm.accept();
        _destructIndex(_owner);
        _owner.transfer({value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO});
    }

    function onBurnError() external  {
        require(msg.sender == _collection, ErrorCodes.NOT_COLLECTION);
        burnInProgress_ = false;
        _owner.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    function proxyTransferToOwner() external {
        // This is the method for possible future prize draws
        _owner.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    function _beforeTransfer(
        address to,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._beforeTransfer(to, sendGasTo, callbacks);
    }

    function _afterTransfer(
        address to,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._afterTransfer(to, sendGasTo, callbacks);
    }

    function _beforeChangeOwner(
        address oldOwner,
        address newOwner,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._beforeChangeOwner(oldOwner, newOwner, sendGasTo, callbacks);
    }

    function _afterChangeOwner(
        address oldOwner,
        address newOwner,
        address sendGasTo,
        mapping(address => CallbackParams) callbacks
    ) internal virtual override(TIP4_1Nft, TIP4_3Nft) {
        TIP4_3Nft._afterChangeOwner(oldOwner, newOwner, sendGasTo, callbacks);
    }
}
