pragma ever-solidity >= 0.64.0;

import '@itgold/everscale-tip/contracts/TIP4_3/TIP4_3Collection.sol';
import '@itgold/everscale-tip/contracts/TIP4_2/TIP4_2Collection.sol';

import "./structures/ITile.tsol";
import "./interfaces/ISegmintCollection.tsol";

import "./libraries/MsgFlag.tsol";
import "./libraries/ErrorCodes.tsol";
import './SegmintNft.tsol';


contract SegmintCollection is TIP4_2Collection, TIP4_3Collection, ITile, ISegmintCollection {

    address private static owner_;
    uint16 private static nonce_;
    bool private mintDisabled_;

    address manager_;

    // x = 0..50, y = 0.50 (50 pieces by 20 pixes - 1000x1000)
    // uint7 - 128 - x coord << 7
    // uint7 - 128 - y coord
    mapping (uint12 => Tile) private tiles_;

    uint32 private currentEpoch_;                 // Num of current epoch
    uint12 private currentEpochTilesLeft_;        // How many tiles left to mint before new epoch is started
    uint128 private currentEpochTilePrice_;       // Price per tile
    uint128 private prevEpochTilePrice_;
    uint128 private epochTilePriceGrow_;

    uint128 constant remainOnNft_ = 0.3 ever;

    event MintDisabledChanged(bool newValue);

    event TileColorify(uint32 nftId, uint32 nftEpoch, uint6 tileX, uint6 tileY, bytes colors);
    event NftMinted(uint32 nftId, uint32 nftEpoch, address owner, uint6 tileStartX, uint6 tileStartY, uint6 tileEndX, uint6 tileEndY, bytes[] colors);
    event EpochChanged(uint32 newEpoch, uint128 oneTileClaimPrice);

    constructor(
        TvmCell codeNft,
        TvmCell codeIndex,
        TvmCell codeIndexBasis,
        string jsonMetadata
    ) TIP4_1Collection (
        codeNft
    ) TIP4_2Collection (
        jsonMetadata
    ) TIP4_3Collection (
        codeIndex,
        codeIndexBasis
    ) public {
        require(msg.sender == owner_, ErrorCodes.NOT_OWNER);
        require(tvm.pubkey() == 0, ErrorCodes.PUBKEY_MUST_BE_NOT_SET);
        tvm.rawReserve(1 ever, 0);

        TvmBuilder salt;
        salt.store(address(this));
        _codeNft = tvm.setCodeSalt(_codeNft, salt.toCell());

        mintDisabled_ = true;
        currentEpoch_ = 1;
        currentEpochTilePrice_ = 0.1 ever;
        prevEpochTilePrice_ = 0;
        epochTilePriceGrow_ = 0.001 ever;
        currentEpochTilesLeft_ = 2500;
        manager_ = owner_;
        msg.sender.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
    }

    modifier onlyOwner() {
        require(msg.sender == owner_, ErrorCodes.NOT_OWNER);
        _;
    }

    modifier onlyManager() {
        require(msg.sender == manager_, ErrorCodes.NOT_MANAGER);
        _;
    }

    modifier onlyMintEnabled() {
        require(mintDisabled_ == false, ErrorCodes.MINT_DISABLED);
        _;
    }

    function changeOwner(address newOwner) external onlyOwner {
        require(newOwner.value != 0, ErrorCodes.BAD_NEW_OWNER);
        owner_ = newOwner;
        msg.sender.transfer(0, false, MsgFlag.REMAINING_GAS);
    }

    function changeManager(address newManager) external onlyOwner {
        manager_ = newManager;
        msg.sender.transfer(0, false, MsgFlag.REMAINING_GAS);
    }

    function disableMint() external override responsible onlyOwner returns(bool) {
        mintDisabled_ = true;
        emit MintDisabledChanged(mintDisabled_);
        return { value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false } mintDisabled_;
    }

    function enableMint() external override responsible onlyOwner returns(bool) {
        mintDisabled_ = false;
        emit MintDisabledChanged(mintDisabled_);
        return { value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false } mintDisabled_;
    }

    function getMintDisabled() external override responsible returns (bool){
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false } mintDisabled_;
    }

    function changeEpoch() external override responsible onlyOwner returns(uint32, uint128) {
        _changeEpoch();
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} (currentEpoch_, currentEpochTilePrice_);
    }

    function setTilePrice(uint128 newCurrentPrice, uint128 newEpochPriceGrow) external onlyOwner {
        require(newCurrentPrice > 0, ErrorCodes.INVALID_NEW_PRICE);
        currentEpochTilePrice_ = newCurrentPrice;       // Price per tile
        epochTilePriceGrow_ = newEpochPriceGrow;
        if (prevEpochTilePrice_ > currentEpochTilePrice_) {
            // Decrease because we calculated how much must be reserved on contract
            // with prevEpochTilePrice_, and if prevEpochTilePrice_ > currentEpochTilePrice_
            // claim will fail on action phase
            prevEpochTilePrice_ = currentEpochTilePrice_;
        }
        msg.sender.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    function setNftBurningBlocked(uint32 nftId, bool isBlocked, address sendGasBack) external override onlyManager  {
        SegmintNft(_resolveNft(nftId)).setBurningBlocked{value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS}(isBlocked, sendGasBack);
    }

    function _buildNftState(
        TvmCell code,
        uint256 id
    ) internal virtual override(TIP4_2Collection, TIP4_3Collection) pure returns (TvmCell) {
        return tvm.buildStateInit({
            contr: SegmintNft,
            varInit: {_id: id},
            code: code
        });
    }

    function claimTiles(uint6 tileStartX, uint6 tileStartY, uint6 tileEndX, uint6 tileEndY, bytes[] tilesToColorify, string description, string url) external override onlyMintEnabled {

        uint12 tilesCount = uint12(tileEndX - tileStartX) * uint12(tileEndY - tileStartY);
        if (tileStartX >= tileEndX || tileStartY >= tileEndY || tileEndX > 50 || tileEndY > 50 || tilesCount > 50) {
            revert(ErrorCodes.WRONG_TILE_COORDS);
        }

        uint32 nftId = uint32(_totalSupply);
        _totalSupply += 1;
        uint64 nftIdWithEpoch = (uint64(nftId) << 32) | currentEpoch_;

        uint colorifyIndex;
        uint cells; uint bits; uint refs;

        for (uint12 tileX = tileStartX; tileX < tileEndX; tileX++) {
            uint12 shiftedX = tileX << 6;
            for (uint6 tileY = tileStartY; tileY < tileEndY; tileY++) {
                // set this tile index to be owned by nft
                // we already checked is this index free in _validateClaim
                uint12 index = shiftedX | tileY;

                bytes colors = tilesToColorify[colorifyIndex];
                (cells, bits, refs) = colors.dataSize(10);
                require(bits <= 9600, ErrorCodes.INVALID_COLORS_SIZE);
                colorifyIndex++;

                optional(Tile) oPrevTile = tiles_.getSet(index, Tile(nftIdWithEpoch, colors));
                if (oPrevTile.hasValue()) {
                    require(oPrevTile.get().epochWitNftId & 4294967295 < currentEpoch_, ErrorCodes.TILE_ALREADY_TAKEN);
                }
            }
        }

        uint128 currentPrice = tilesCount * currentEpochTilePrice_;
        uint128 prevPrice = tilesCount * prevEpochTilePrice_;

        // we check because messages not bounce on action phase.
        // current price + 0.2 venom for gas + 0.7 venom for NFT deployment + 0.05 venom for storage payment
        // + 0.05 venom for maximum forward fee = 1 ever
        require(msg.value > currentPrice + 1 ever);

        // We reverse on contract 0.05 venom for payment storage + diff between prev epoch price and current epoch price
        // for rebate
        tvm.rawReserve(0.05 ever + prevPrice, 4);
        emit NftMinted(nftId, currentEpoch_, msg.sender, tileStartX, tileStartY, tileEndX, tileEndY, tilesToColorify);

        // generate next epoch
        currentEpochTilesLeft_ -= tilesCount;
        // if less then 15% left start new epoch.
        if (currentEpochTilesLeft_ < 500) {
            _changeEpoch();
        }

        TvmCell stateNft = _buildNftState(_codeNft, uint256(nftId));
        address nftAddr = new SegmintNft{
                stateInit: tvm.buildStateInit({
                    contr: SegmintNft,
                    varInit: {_id: nftId},
                    code: _codeNft
                }),
                value: 0.7 ever + currentPrice - prevPrice,
                flag: MsgFlag.SENDER_PAYS_FEES
        } (
            msg.sender,
            owner_,
            remainOnNft_,
            _indexDeployValue,
            _indexDestroyValue,
            _codeIndex,
            currentPrice,
            tileStartX,
            tileStartY,
            tileEndX,
            tileEndY,
            description,
            url
        );

        // return the change
        msg.sender.transfer( 0,  false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
    }

    function colorifyTiles(uint32 nftId, bytes[] tilesColors, uint6 tileStartX, uint6 tileStartY, uint6 tileEndX, uint6 tileEndY, address sendGasBack) external override {
        require(msg.sender == _resolveNft(nftId), ErrorCodes.WRONG_NFT);
        tvm.rawReserve(0.01 ever, 4);

        uint colorifyIndex;
        uint cells; uint bits; uint refs;

        for (uint6 tileX = tileStartX; tileX < tileEndX; tileX++) {
            uint12 shiftedX = uint12(tileX) << 6;
            for (uint6 tileY = tileStartY; tileY < tileEndY; tileY++) {
                uint12 index = shiftedX | tileY;
                Tile prevTile = tiles_[index];
                uint32 ownedByNftId = uint32(prevTile.epochWitNftId >> 32);
                if (ownedByNftId == nftId) {
                    uint32 nftEpoch = uint32(prevTile.epochWitNftId & 4294967295);
                    bytes colors = tilesColors[colorifyIndex];
                    (cells, bits, refs) = colors.dataSize(10);
                    if (bits <= 9600) {
                        colorifyIndex++;
                        prevTile.colors = colors;
                        tiles_[index] = prevTile;
                        emit TileColorify(nftId, nftEpoch, tileX, tileY, colors);
                    }
                }
            }
        }
        sendGasBack.transfer( 0,  false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
    }

    function burnNft(uint32 nftId, uint128 lockedAmount, uint6 nftTileStartX_, uint6 nftTileStartY_, uint6 nftTileEndX_, uint6 nftTileEndY_) external override {
        require(msg.sender == _resolveNft(nftId), ErrorCodes.WRONG_NFT);
        bool shouldCancel = false;

        for (uint6 tileX = nftTileStartX_; tileX < nftTileEndX_; tileX++) {
            uint12 shiftedX = uint12(tileX) << 6;
            for (uint6 tileY = nftTileStartY_; tileY < nftTileEndY_; tileY++) {
                Tile prevOwnerInfo = tiles_[shiftedX | tileY];
                uint32 ownedByNftId = uint32(prevOwnerInfo.epochWitNftId >> 32);
                if (ownedByNftId == nftId) {
                    shouldCancel = true;
                }
            }
        }

        if (shouldCancel || address(this).balance - msg.value < lockedAmount) {
            SegmintNft(msg.sender).onBurnError{value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS}();
        } else {
            SegmintNft(msg.sender).onBurnSuccess{value: lockedAmount, bounce: false, flag: MsgFlag.REMAINING_GAS}();
        }
    }

    function getTile(uint6 tileX, uint6 tileY) external override responsible returns (bytes pixels, uint32 nftId, uint32 epoch) {
        // 2 ** 32
        nftId = uint32(4294967295);
        uint12 index = (uint12(tileX) << 6) | uint12(tileY);

        optional(Tile) oNftOwnerData = tiles_.fetch(index);
        if (oNftOwnerData.hasValue()) {
            Tile tile = oNftOwnerData.get();
            pixels = tile.colors;
            nftId = uint32(tile.epochWitNftId >> 32);
            epoch = uint32(tile.epochWitNftId & 4294967295);
        }

        return{value: 0, bounce: false, flag: 64} (pixels, nftId, epoch);
    }

    function getData() external responsible returns(uint32 nftCounter, uint32 epoch, uint128 currentEpochTilePrice, bool mintDisabled) {
        return{value: 0, bounce: false, flag: 64} (uint32(_totalSupply), currentEpoch_, currentEpochTilePrice_, mintDisabled_);
    }

    function getNftIndexCodeHash(
        address _owner
    ) external view responsible returns (string codeHash) {
        TvmBuilder salt;
        salt.store("nft");
        salt.store(address(this));
        salt.store(_owner);
        TvmCell code = tvm.setCodeSalt(_codeIndex, salt.toCell());
        return{value: 0, bounce: false, flag: 64} format("{:064x}", tvm.hash(code));
    }

    function getRandomNftFromTheField(uint256 seed) external responsible returns(address) {
        // This is the method for possible future prize draws
        // Work only if field is full.
        rnd.setSeed(seed);
        uint6 x = rnd.next(uint6(50));
        uint6 y = rnd.next(uint6(50));

        uint12 coord = (uint12(x) << 6) | y;
        Tile tile = tiles_[coord];
        uint32 nftId = uint32(tile.epochWitNftId >> 32);

        return{value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} _resolveNft(nftId);
    }

    function _changeEpoch() private inline {
        currentEpoch_ += 1;
        currentEpochTilesLeft_ = 2500;
        prevEpochTilePrice_ = currentEpochTilePrice_;
        currentEpochTilePrice_ += epochTilePriceGrow_;
        emit EpochChanged(currentEpoch_, currentEpochTilePrice_);
    }

    function upgrade(TvmCell newCode) external onlyOwner {
        // TODO add test which one is checking we pack all values mentioned
        // in abi.json

        TvmCell data = abi.encode(
            _supportedInterfaces,
            _codeNft,
            _totalSupply,
            _json,
            _codeIndex,
            _codeIndexBasis,
            _indexDeployValue,
            _indexDestroyValue,
            _deployIndexBasisValue,
            owner_,
            nonce_,
            mintDisabled_,
            manager_,
            tiles_,
            currentEpoch_,
            currentEpochTilesLeft_,
            currentEpochTilePrice_,
            prevEpochTilePrice_,
            epochTilePriceGrow_
        );

        tvm.setcode(newCode);
        tvm.setCurrentCode(newCode);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell data) private {}
}
