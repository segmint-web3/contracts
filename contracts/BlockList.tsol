pragma ever-solidity >= 0.64.0;

import "./libraries/MsgFlag.tsol";
import "./libraries/ErrorCodes.tsol";
import "./interfaces/ISegmintCollection.tsol";

// This is contract to store banned NFT id
// TO hide them on frontend.
contract BlockList {

    uint16 private static nonce_;
    address private static owner_;

    mapping (address => bool) private managers_;
    mapping (uint32 => bool) private blocked_;

    event NftBlocked(uint32 id);

    modifier onlyOwner() {
        require(msg.sender == owner_, ErrorCodes.NOT_OWNER);
        _;
    }

    modifier onlyManager() {
        require(managers_[msg.sender] == true, ErrorCodes.NOT_MANAGER);
        _;
    }

    constructor() public {
        require(tvm.pubkey() == 0, ErrorCodes.PUBKEY_MUST_BE_NOT_SET);
        require(msg.sender == owner_, ErrorCodes.NOT_OWNER);
        managers_[msg.sender] = true;
        tvm.rawReserve(0.3 ever, 0);
        msg.sender.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS);
    }

    function addManager(address manager) external onlyOwner {
        managers_[manager] = true;
        msg.sender.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    function removeManager(address manager) external onlyOwner {
        delete managers_[manager];
        msg.sender.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }

    function addToBanList(address collection, uint32 nftId) external onlyManager {
        blocked_[nftId] = true;
        tvm.rawReserve(0, 4);
        emit NftBlocked(nftId);
        ISegmintCollection(collection).setNftBurningBlocked{value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED}(nftId, true, msg.sender);
    }

    function removeFromBanList(address collection, uint32 nftId) external onlyOwner  {
        delete blocked_[nftId];
        ISegmintCollection(collection).setNftBurningBlocked{value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS}(nftId, false, msg.sender);
    }

    function cleanBanList() external onlyOwner {
        mapping (uint32 => bool) cleanMapping;
        blocked_ = cleanMapping;
        msg.sender.transfer(0, false, MsgFlag.REMAINING_GAS + MsgFlag.IGNORE_ERRORS);
    }
}
